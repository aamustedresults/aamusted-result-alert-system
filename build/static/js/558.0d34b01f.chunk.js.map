{"version":3,"file":"static/js/558.0d34b01f.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/SearchSharp.js","components/ResultsItem.js","components/ResultsList.js","pages/DataEntry.js"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"\n}), 'SearchSharp');","import React from \"react\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction ResultsItem({ result, handleRemoveResult }) {\r\n  return (\r\n    <tr style={{ textAlign: \"center\" }}>\r\n      <td>{result.course.id}</td>\r\n      <td>{result.course.label}</td>\r\n      <td>{result.score}</td>\r\n      <td>{result.grade}</td>\r\n      <td>\r\n        <Button onClick={() => handleRemoveResult(result.course.id)}>\r\n          Remove\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default ResultsItem;\r\n","import React from \"react\";\r\nimport { Stack } from \"@mui/material\";\r\nimport ResultsItem from \"./ResultsItem\";\r\n\r\nfunction ResultsList({ results, setResults }) {\r\n  const handleRemoveResult = (id) => {\r\n    const filteredResults = results.filter(\r\n      (result) => result.course.id !== id\r\n    );\r\n    setResults(filteredResults);\r\n  };\r\n\r\n  return (\r\n    <Stack\r\n      sx={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <table width=\"100%\">\r\n        <thead\r\n          style={{\r\n            color: \"#fff\",\r\n            backgroundColor: \"#5aa7a7\",\r\n          }}\r\n        >\r\n          <tr>\r\n            <th>Code</th>\r\n            <th>Course</th>\r\n            <th>Score</th>\r\n            <th>Grade</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {results.map((result, index) => {\r\n            return (\r\n              <ResultsItem\r\n                key={index}\r\n                result={result}\r\n                handleRemoveResult={handleRemoveResult}\r\n              />\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </Stack>\r\n  );\r\n}\r\n\r\nexport default ResultsList;\r\n","import React, {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  useTransition,\r\n} from \"react\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport {\r\n  Alert,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Autocomplete,\r\n  Grid,\r\n  TextField,\r\n  Stack,\r\n  Avatar,\r\n  InputAdornment,\r\n} from \"@mui/material\";\r\n\r\nimport { Helmet } from \"react-helmet\";\r\nimport { SearchSharp } from \"@mui/icons-material\";\r\nimport _ from \"lodash\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useQuery, useMutation } from \"react-query\";\r\nimport { Formik } from \"formik\";\r\nimport { addResult } from \"../components/api/resultApi\";\r\nimport Content from \"../components/Content\";\r\nimport ResultsList from \"../components/ResultsList\";\r\nimport { getAllStudents } from \"../components/api/studentApi\";\r\nimport { getAllRegisteredCourses } from \"../components/api/registeredCoursesApi\";\r\nimport { object, string } from \"yup\";\r\n\r\nconst levelOptions = [\"100\", \"200\", \"300\", \"400\"];\r\nconst semesterOptions = [\"1\", \"2\"];\r\nconst yearOptions = [\"2021\", \"2022\", \"2023\"];\r\nfunction DataEntry() {\r\n  const { state } = useLocation();\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const [courseErr, setCourseErr] = useState(\"\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const [fullname, setFullname] = useState(\"\");\r\n  const [profile, setProfile] = useState(null);\r\n  const [indexNumber, setIndexNumber] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n  const [level, setLevel] = useState(null);\r\n  const [semester, setSemester] = useState(null);\r\n  const [course, setCourse] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n  const [grade, setGrade] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n  const [coursesOptions, setCourseOptions] = useState([]);\r\n  const [display, setDisplay] = useState(\"none\");\r\n\r\n  useEffect(() => {\r\n    const isSticky = (e) => {\r\n      let d = \"none\";\r\n      const scrollHeight = window.scrollY;\r\n\r\n      if (scrollHeight >= 220) {\r\n        d = \"block\";\r\n      } else {\r\n        d = \"none\";\r\n      }\r\n\r\n      setDisplay(d);\r\n    };\r\n    window.addEventListener(\"scroll\", isSticky);\r\n\r\n    return () => window.removeEventListener(\"scroll\", isSticky);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!_.isEmpty(state)) {\r\n      setFullname(state.student.fullname);\r\n      setProfile(state.student.profile);\r\n      setIndexNumber(state.student.indexNumber);\r\n    }\r\n  }, [state]);\r\n\r\n  useQuery(\r\n    [\"registeredCourses\", indexNumber, level, semester],\r\n    async () => getAllRegisteredCourses(indexNumber),\r\n    {\r\n      enabled: !!indexNumber,\r\n      onSuccess: (data) => {\r\n        let courseArr = [];\r\n        let filteredCourses = data;\r\n\r\n        // filter by level\r\n\r\n        if (level) {\r\n          filteredCourses = filteredCourses.filter(\r\n            (course) => course.level === level\r\n          );\r\n        }\r\n\r\n        //filter by semester\r\n        if (semester) {\r\n          filteredCourses = filteredCourses.filter(\r\n            (course) => course.semester === Number(semester)\r\n          );\r\n        }\r\n\r\n        // console.table(filteredCourses);\r\n\r\n        const myRegisteredCourses = filteredCourses.map((course) => [\r\n          ...course.courses,\r\n        ]);\r\n        _.flatMap(myRegisteredCourses).map((info) =>\r\n          courseArr.push({ id: info.course.id, label: info.course.label })\r\n        );\r\n        // console.log(courseArr);\r\n        setCourseOptions(courseArr);\r\n      },\r\n    }\r\n  );\r\n\r\n  const students = useQuery([\"student\"], getAllStudents, {\r\n    onError: (error) => {\r\n      alert(\"Error occured while fetching data\");\r\n    },\r\n  });\r\n\r\n  const handleSubmitResult = useCallback(() => {\r\n    setCourseErr(\"\");\r\n    const record = {\r\n      course: course,\r\n      score: Number(score),\r\n      grade: grade,\r\n    };\r\n\r\n    const ifAny = results.find(\r\n      (result) => result.course.id === record.course.id\r\n    );\r\n    if (ifAny) {\r\n      setCourseErr(\"Course already exists.Please remove before!\");\r\n      return;\r\n    }\r\n\r\n    setResults([...results, record]);\r\n  }, [course, grade, score, results]);\r\n\r\n  useEffect(() => {\r\n    const scoreT = Number(score);\r\n    let t = \"\";\r\n    if (scoreT > 79 && scoreT <= 100) {\r\n      //80-100\r\n      t = \"A\";\r\n    }\r\n    if (scoreT > 74 && scoreT < 80) {\r\n      //75-79\r\n      t = \"B+\";\r\n    }\r\n    if (scoreT > 69 && scoreT < 75) {\r\n      //70-74\r\n      t = \"B\";\r\n    }\r\n    if (scoreT > 64 && scoreT < 70) {\r\n      //65-69\r\n      t = \"C+\";\r\n    }\r\n    if (scoreT > 59 && scoreT < 65) {\r\n      //60-64\r\n      t = \"C\";\r\n    }\r\n    if (scoreT > 54 && scoreT < 60) {\r\n      //55-59\r\n      t = \"D+\";\r\n    }\r\n    if (scoreT > 49 && scoreT < 55) {\r\n      //50-54\r\n      t = \"D\";\r\n    }\r\n    if (scoreT > 44 && scoreT < 50) {\r\n      //45-49\r\n      t = \"E\";\r\n    }\r\n    if (scoreT < 45) {\r\n      //0-44\r\n      t = \"F\";\r\n    }\r\n    setGrade(t);\r\n  }, [score]);\r\n\r\n  const initialValues = {\r\n    indexNumber,\r\n    year,\r\n    level,\r\n    semester,\r\n    results,\r\n  };\r\n\r\n  const validationSchema = object().shape({\r\n    year: string().trim().required().nullable(true),\r\n    level: string().trim().required().nullable(true),\r\n    semester: string().trim().required().nullable(true),\r\n    course: string().trim().required().nullable(true),\r\n    score: string().trim().required().nullable(true),\r\n  });\r\n\r\n  const resultMutate = useMutation(addResult);\r\n\r\n  const onSubmit = async (values, options) => {\r\n    // console.log(values);\r\n    options.setSubmitting(true);\r\n\r\n    resultMutate.mutateAsync(values, {\r\n      onSettled: () => {\r\n        options.setSubmitting(false);\r\n      },\r\n      onSuccess: (data) => {\r\n        alert(\"Data Saved\");\r\n        // console.log(data);\r\n\r\n\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleSearchStudent = (e) => {\r\n    setSearch(e.currentTarget.value);\r\n    const searchItem = e.currentTarget.value;\r\n\r\n    if (searchItem === \"\" || searchItem.length === 0) {\r\n      setFullname(\"\");\r\n      setIndexNumber(\"\");\r\n      setProfile(null);\r\n      return;\r\n    }\r\n\r\n    startTransition(() => {\r\n      const filteredList = students.data.filter(\r\n        (student) => student.indexNumber.lastIndexOf(searchItem) > -1\r\n      );\r\n      if (filteredList.length === 0) {\r\n        setFullname(\"\");\r\n        setIndexNumber(\"\");\r\n        setProfile(null);\r\n        return;\r\n      }\r\n\r\n      // console.log(filteredList);\r\n      setFullname(filteredList[0].fullname);\r\n      setIndexNumber(filteredList[0].indexNumber);\r\n      setProfile(filteredList[0].profile);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Results System | Results Entry</title>\r\n      </Helmet>\r\n\r\n      <section className=\"data-entry-container\">\r\n        <Formik\r\n          initialValues={initialValues}\r\n          // validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n          enableReinitialize={true}\r\n        >\r\n          {({ handleSubmit, isSubmitting, errors, values, touched }) => {\r\n            return (\r\n              <>\r\n                <Box\r\n                  sx={{\r\n                    display: display,\r\n                    width: \"100%\",\r\n                    height: 80,\r\n                    backgroundColor: \"#fff\",\r\n                    transition: \"display 500ms ease-in-out\",\r\n                    boxShadow: \"0 1px 3px rgba(0,0,0,0.15)\",\r\n                    position: \"sticky\",\r\n                    top: 160,\r\n                    zIndex: 19999,\r\n                    padding: 1,\r\n                  }}\r\n                >\r\n                  <LoadingButton\r\n                    disabled={results.length === 0}\r\n                    variant=\"contained\"\r\n                    loading={isSubmitting}\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Save Results\r\n                  </LoadingButton>\r\n                </Box>\r\n                <Content>\r\n                  <Typography variant=\"h4\">Result Entry</Typography>\r\n                  <Stack spacing={3} paddingY={3}>\r\n                    <TextField\r\n                      fullWidth\r\n                      placeholder=\"Search for Student\"\r\n                      inputMode=\"search\"\r\n                      type=\"search\"\r\n                      value={search}\r\n                      onChange={handleSearchStudent}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <SearchSharp />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n\r\n                    <Box>\r\n                      <Box\r\n                        sx={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"space-between\",\r\n                          paddingY: 1,\r\n                          gap: 1,\r\n                        }}\r\n                      >\r\n                        <Typography>Personal Information</Typography>\r\n                        <LoadingButton\r\n                          disabled={results.length === 0}\r\n                          variant=\"contained\"\r\n                          onClick={handleSubmit}\r\n                        >\r\n                          Save Results\r\n                        </LoadingButton>\r\n                      </Box>\r\n                      <Divider />\r\n                      <Stack paddingY={1} direction=\"row\" spacing={3}>\r\n                        <Avatar\r\n                          src={\r\n                            profile === null ||\r\n                            profile === \"\" ||\r\n                            profile === undefined\r\n                              ? null\r\n                              : `${process.env.REACT_APP_BASE_URL}/images/${profile}`\r\n                          }\r\n                          sx={{\r\n                            width: 60,\r\n                            height: 60,\r\n                          }}\r\n                        />\r\n                        <Stack>\r\n                          <Typography variant=\"h6\" color=\"slateblue\">\r\n                            {fullname}\r\n                          </Typography>\r\n                          <Typography variant=\"body\">{indexNumber}</Typography>\r\n                        </Stack>\r\n                      </Stack>\r\n                    </Box>\r\n\r\n                    <Box>\r\n                      <Typography paddingY={1}>Academic Information</Typography>\r\n                      <Divider />\r\n                      <Grid\r\n                        container\r\n                        sx={{\r\n                          display: \"flex\",\r\n                          justifyContent: { xs: \"center\", md: \"space-between\" },\r\n                          alignItems: \"center\",\r\n                          paddingY: 2,\r\n                          gap: 1,\r\n                        }}\r\n                      >\r\n                        <Grid item>\r\n                          <Autocomplete\r\n                            disablePortal\r\n                            options={yearOptions}\r\n                            freeSolo\r\n                            value={year}\r\n                            onChange={(e, value) => setYear(value)}\r\n                            sx={{ minWidth: 150, width: 300 }}\r\n                            renderInput={(props) => (\r\n                              <TextField\r\n                                label=\"Academic Year\"\r\n                                variant=\"filled\"\r\n                                {...props}\r\n                                id=\"year\"\r\n                                size=\"small\"\r\n                                placeholder=\"Academic Year\"\r\n                                fullWidth\r\n                                error={Boolean(touched.year && errors.year)}\r\n                                helperText={\r\n                                  touched.year && errors.year && errors.year\r\n                                }\r\n                              />\r\n                            )}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item>\r\n                          {/* <FormLabel htmlFor=\"level\">Level</FormLabel> */}\r\n                          <Autocomplete\r\n                            disablePortal\r\n                            options={levelOptions}\r\n                            value={level}\r\n                            onChange={(e, value) => setLevel(value)}\r\n                            sx={{ minWidth: 150, width: 300 }}\r\n                            renderInput={(props) => (\r\n                              <TextField\r\n                                label=\"Level\"\r\n                                variant=\"filled\"\r\n                                {...props}\r\n                                id=\"level\"\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                placeholder=\"Level\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item>\r\n                          {/* <FormLabel htmlFor=\"semester\">Semester</FormLabel> */}\r\n                          <Autocomplete\r\n                            disablePortal\r\n                            options={semesterOptions}\r\n                            value={semester}\r\n                            onChange={(e, value) => setSemester(value)}\r\n                            sx={{ minWidth: 150, width: 300 }}\r\n                            renderInput={(props) => (\r\n                              <TextField\r\n                                label=\"Semester\"\r\n                                variant=\"filled\"\r\n                                {...props}\r\n                                id=\"semester\"\r\n                                size=\"small\"\r\n                                placeholder=\"Semester\"\r\n                                fullWidth\r\n                              />\r\n                            )}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Box>\r\n                    <Box>\r\n                      <Typography paddingY={1}>Results Information</Typography>\r\n                      <Divider />\r\n                      <Grid\r\n                        container\r\n                        sx={{\r\n                          display: \"flex\",\r\n                          justifyContent: {\r\n                            xs: \"center\",\r\n                            md: \"flex-start\",\r\n                          },\r\n                          alignItems: \"center\",\r\n                          paddingY: 2,\r\n                          gap: 1,\r\n                        }}\r\n                      >\r\n                        <Grid item>\r\n                          {/* <FormLabel htmlFor=\"course\">Select Course</FormLabel> */}\r\n                          <Autocomplete\r\n                            disablePortal\r\n                            options={coursesOptions}\r\n                            value={course}\r\n                            isOptionEqualToValue={(option, value) =>\r\n                              option.label === value.label\r\n                            }\r\n                            onChange={(e, value) => setCourse(value)}\r\n                            sx={{ minWidth: 150, width: 300 }}\r\n                            renderInput={(props) => (\r\n                              <TextField\r\n                                variant=\"filled\"\r\n                                label=\"Course\"\r\n                                {...props}\r\n                                id=\"course\"\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                placeholder=\"Course\"\r\n                                helperText={\r\n                                  coursesOptions.length === 0\r\n                                    ? \"No courses available\"\r\n                                    : `${coursesOptions.length} course(s) available`\r\n                                }\r\n                              />\r\n                            )}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item>\r\n                          <TextField\r\n                            label=\"Score\"\r\n                            variant=\"filled\"\r\n                            id=\"score\"\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            fullWidth\r\n                            placeholder=\"Score\"\r\n                            value={score}\r\n                            sx={{ minWidth: 150, width: 300 }}\r\n                            onChange={(e) => setScore(e.currentTarget.value)}\r\n                            helperText=\"Scores should be from 0-100\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        disabled={course === \"\" || course === null}\r\n                        size=\"large\"\r\n                        sx={{ minWidth: 200, color: \"#fff\" }}\r\n                        onClick={handleSubmitResult}\r\n                      >\r\n                        Add Results\r\n                      </Button>\r\n                    </Box>\r\n                  </Stack>\r\n                  {courseErr && (\r\n                    <Alert\r\n                      // variant=\"filled\"\r\n                      severity=\"error\"\r\n                      onClose={() => setCourseErr(\"\")}\r\n                    >\r\n                      {courseErr}\r\n                    </Alert>\r\n                  )}\r\n                  <ResultsList results={results} setResults={setResults} />\r\n                </Content>\r\n              </>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DataEntry;\r\n"],"names":["createSvgIcon","_jsx","d","result","handleRemoveResult","style","textAlign","course","id","label","score","grade","Button","onClick","results","setResults","filteredResults","filter","Stack","sx","display","alignItems","justifyContent","width","color","backgroundColor","map","index","levelOptions","semesterOptions","yearOptions","state","useLocation","useTransition","startTransition","useState","courseErr","setCourseErr","search","setSearch","fullname","setFullname","profile","setProfile","indexNumber","setIndexNumber","year","setYear","level","setLevel","semester","setSemester","setCourse","setScore","setGrade","coursesOptions","setCourseOptions","setDisplay","useEffect","isSticky","e","scrollHeight","window","scrollY","addEventListener","removeEventListener","_","student","useQuery","getAllRegisteredCourses","enabled","onSuccess","data","courseArr","filteredCourses","Number","myRegisteredCourses","courses","info","push","students","getAllStudents","onError","error","alert","handleSubmitResult","useCallback","record","find","scoreT","t","initialValues","resultMutate","object","shape","string","trim","required","nullable","useMutation","addResult","onSubmit","values","options","setSubmitting","mutateAsync","onSettled","handleSearchStudent","currentTarget","value","searchItem","length","filteredList","lastIndexOf","Helmet","className","enableReinitialize","handleSubmit","isSubmitting","errors","touched","Box","height","transition","boxShadow","position","top","zIndex","padding","LoadingButton","disabled","variant","loading","Content","Typography","spacing","paddingY","TextField","fullWidth","placeholder","inputMode","type","onChange","InputProps","endAdornment","InputAdornment","SearchSharp","gap","Divider","direction","Avatar","src","undefined","process","Grid","container","xs","md","item","Autocomplete","disablePortal","freeSolo","minWidth","renderInput","props","size","Boolean","helperText","isOptionEqualToValue","option","Alert","severity","onClose"],"sourceRoot":""}