{"version":3,"file":"static/js/609.98bc77b4.chunk.js","mappings":"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","sources":["components/modals/AddDepartment.js","components/tabs/DepartmentTab.js","components/modals/AddProgramme.js","components/tabs/ProgrammeTab.js","components/modals/AddCourse.js","components/tabs/CourseTab.js","../node_modules/@mui/icons-material/esm/House.js","../node_modules/@mui/icons-material/esm/CodeSharp.js","../node_modules/@mui/icons-material/esm/CalendarTodaySharp.js","pages/Department.js"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  TextField,\r\n  Stack,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport HouseSidingIcon from \"@mui/icons-material/HouseSiding\";\r\nimport { useMutation, useQueryClient } from \"react-query\";\r\nimport { addDepartment } from \"../api/departmentApi\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction AddDepartment({ open, setOpen }) {\r\n  const { palette } = useTheme();\r\n  const queryClient = useQueryClient();\r\n  const initialValues = {\r\n    id: \"\",\r\n    department: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    department: Yup.string().trim().required(),\r\n  });\r\n\r\n  const departmentMutate = useMutation(addDepartment);\r\n\r\n  const onSubmit = (values, options) => {\r\n    options.setSubmitting(true);\r\n    departmentMutate.mutateAsync(values, {\r\n      onSettled: () => {\r\n        options.setSubmitting(false);\r\n        queryClient.invalidateQueries([\"department\"]);\r\n      },\r\n      onSuccess: (data) => {\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          iconColor: palette.primary.main,\r\n          title: \"Success\",\r\n          text: \"New Department added!!!\",\r\n          confirmButtonColor: palette.primary.main,\r\n        });\r\n      },\r\n      onError: (error) => {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          iconColor: palette.primary.main,\r\n          title: \"Error\",\r\n          text: \"Error saving department information.Please try again\",\r\n          confirmButtonColor: palette.primary.main,\r\n        });\r\n      },\r\n     \r\n    });\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      fullWidth\r\n      maxWidth=\"xs\"\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      tabIndex=\"-1\"\r\n    >\r\n      <DialogTitle title=\"Add Department\">\r\n        <HouseSidingIcon />\r\n        Add Department\r\n      </DialogTitle>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n      >\r\n        {(formik) => (\r\n          <>\r\n            <DialogContent>\r\n              <Stack paddingTop={2}>\r\n                <TextField\r\n                  variant=\"filled\"\r\n                  label=\"Department\"\r\n                  size=\"sm\"\r\n                  fullWidth\r\n                  value={formik.values.department}\r\n                  onChange={formik.handleChange(\"department\")}\r\n                  onBlur={formik.handleBlur(\"department\")}\r\n                  error={formik.touched.department && formik.errors.department}\r\n                  helperText={formik.errors.department}\r\n                />\r\n              </Stack>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <LoadingButton\r\n                variant=\"contained\"\r\n                loading={formik.isSubmitting}\r\n                onClick={formik.handleSubmit}\r\n                sx={{\r\n                  minWidth: 100,\r\n                }}\r\n              >\r\n                Save\r\n              </LoadingButton>\r\n              <Button color=\"secondary\" onClick={() => setOpen(false)}>\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default AddDepartment;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Add } from \"@mui/icons-material\";\r\nimport { Box, Button } from \"@mui/material\";\r\nimport CustomTable from \"../tables/CustomTable\";\r\nimport AddDepartment from \"../modals/AddDepartment\";\r\nimport { departmentColumns } from \"../data/columns\";\r\nimport { useQuery } from \"react-query\";\r\nimport { getAllDepartments } from \"../api/departmentApi\";\r\nimport { CustomContext } from \"../context/provider/CustomProvider\";\r\n\r\nfunction DepartmentTab({ data }) {\r\n  const { customDispatch } = useContext(CustomContext);\r\n\r\n  const departmentData = useQuery([\"department\"], getAllDepartments, {\r\n    onSuccess: (data) => {\r\n      customDispatch({ type: \"departOptions\", payload: data });\r\n    },\r\n  });\r\n\r\n  const [openAddDepartment, setOpenAddDepartment] = useState(false);\r\n  return (\r\n    <section>\r\n      <Box>\r\n        <Box display=\"flex\" justifyContent=\"flex-end\">\r\n          <Button\r\n            color=\"secondary\"\r\n            variant=\"contained\"\r\n            sx={{ color: \"#fff\" }}\r\n            onClick={() => setOpenAddDepartment(true)}\r\n            startIcon={<Add />}\r\n          >\r\n            Add New Department\r\n          </Button>\r\n        </Box>\r\n        <CustomTable\r\n          isLoading={departmentData.isLoading}\r\n          heading=\"Department\"\r\n          columns={departmentColumns}\r\n          data={departmentData.data}\r\n          showResultsButton={false}\r\n          refresh={departmentData.refetch}\r\n        />\r\n      </Box>\r\n      <AddDepartment open={openAddDepartment} setOpen={setOpenAddDepartment} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default DepartmentTab;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  TextField,\r\n  Stack,\r\n  Autocomplete,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { Formik } from \"formik\";\r\nimport { useMutation, useQueryClient } from \"react-query\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport { addProgramme } from \"../api/programmeApi\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { CustomContext } from \"../context/provider/CustomProvider\";\r\n\r\nfunction AddProgramme({ open, setOpen }) {\r\n  const { palette } = useTheme();\r\n  const { customState } = useContext(CustomContext);\r\n  const queryClient = useQueryClient();\r\n\r\n  const [depart, setDepart] = useState([]);\r\n  const [department, setDepartment] = useState(null);\r\n  const [programme, setProgramme] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let departOptions = [];\r\n    customState.departmentOptions.forEach((data, index) => {\r\n      departOptions.push(data.department);\r\n    });\r\n\r\n    setDepart(departOptions);\r\n  }, [customState.departmentOptions]);\r\n\r\n  const initialValues = {\r\n    id: \"\",\r\n    programme,\r\n    department: department,\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    department: Yup.string().trim().required().nullable(true),\r\n    programme: Yup.string().trim().required(),\r\n  });\r\n\r\n  const programmeMutate = useMutation(addProgramme);\r\n\r\n  const onSubmit = (values, options) => {\r\n    options.setSubmitting(true);\r\n\r\n    programmeMutate.mutateAsync(values, {\r\n      onSettled: () => {\r\n        options.setSubmitting(false);\r\n        queryClient.invalidateQueries([\"programme\"]);\r\n      },\r\n      onSuccess: (data) => {\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          iconColor: palette.primary.main,\r\n          title: \"Success\",\r\n          text: \"New Programme addeed!!!\",\r\n          confirmButtonColor: palette.primary.main,\r\n        });\r\n        queryClient.invalidateQueries([\"programme\"]);\r\n      },\r\n      onError: (error) => {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          iconColor: palette.primary.main,\r\n          title: \"Error\",\r\n          text: \"Error saving programme information.Please try again\",\r\n          confirmButtonColor: palette.primary.main,\r\n        });\r\n      },\r\n    \r\n    });\r\n  };\r\n\r\n  return (\r\n    <Dialog fullWidth maxWidth=\"xs\" open={open} onClose={() => setOpen(false)}>\r\n      <DialogTitle title=\"Add Department\">Add Programme</DialogTitle>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n        enableReinitialize={true}\r\n      >\r\n        {({\r\n          isSubmitting,\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleSubmit,\r\n          handleBlur,\r\n        }) => (\r\n          <>\r\n            <DialogContent>\r\n              <Stack paddingTop={2} rowGap={3}>\r\n                <Autocomplete\r\n                  id=\"department\"\r\n                  disablePortal\r\n                  size=\"small\"\r\n                  options={depart}\r\n                  value={department}\r\n                  onChange={(e, value) => setDepartment(value)}\r\n                  renderInput={(props) => (\r\n                    <TextField\r\n                      variant=\"filled\"\r\n                      label=\"Select Department\"\r\n                      size=\"small\"\r\n                      placeholder=\"Select Department\"\r\n                      fullWidth\r\n                      {...props}\r\n                      error={Boolean(touched.department && errors.department)}\r\n                      helperText={errors.department}\r\n                      autoFocus\r\n                    />\r\n                  )}\r\n                />\r\n\r\n                <TextField\r\n                  variant=\"filled\"\r\n                  label=\"Programme\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  id=\"programe\"\r\n                  placeholder=\"Enter Programme here\"\r\n                  value={values.programme}\r\n                  onChange={(e, value) => setProgramme(e.currentTarget.value)}\r\n                  error={Boolean(touched.programme && errors.programme)}\r\n                  helperText={errors.programme}\r\n                />\r\n              </Stack>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <LoadingButton\r\n                loading={isSubmitting}\r\n                onClick={handleSubmit}\r\n                sx={{ minWidth: 100 }}\r\n                variant=\"contained\"\r\n              >\r\n                Save\r\n              </LoadingButton>\r\n              <Button color=\"secondary\" onClick={() => setOpen(false)}>\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default AddProgramme;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, Box } from \"@mui/material\";\r\nimport { Add } from \"@mui/icons-material\";\r\nimport CustomTable from \"../tables/CustomTable\";\r\nimport AddProgramme from \"../modals/AddProgramme\";\r\nimport { programmeColumns } from \"../data/columns\";\r\n\r\nimport { useQuery } from \"react-query\";\r\nimport { getAllProgrammes } from \"../api/programmeApi\";\r\nimport { CustomContext } from \"../context/provider/CustomProvider\";\r\n\r\nfunction ProgrammeTab() {\r\n  const { customDispatch } = useContext(CustomContext);\r\n  const [openAddProgramme, setOpenAddProgramme] = useState(false);\r\n\r\n  const programmeData = useQuery([\"programme\"], getAllProgrammes, {\r\n    onSuccess: (data) => {\r\n      customDispatch({ type: \"progOptions\", payload: data });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <Box>\r\n          <Box display=\"flex\" justifyContent=\"flex-end\">\r\n            <Button\r\n              color=\"secondary\"\r\n              variant=\"contained\"\r\n              sx={{ color: \"#fff\" }}\r\n              onClick={() => setOpenAddProgramme(true)}\r\n              startIcon={<Add />}\r\n            >\r\n              Add New Programme\r\n            </Button>\r\n          </Box>\r\n          <CustomTable\r\n            heading=\"Programme\"\r\n            columns={programmeColumns}\r\n            data={programmeData.data}\r\n            refresh={programmeData.refetch}\r\n          />\r\n        </Box>\r\n      </section>\r\n      <AddProgramme open={openAddProgramme} setOpen={setOpenAddProgramme} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProgrammeTab;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Stack,\r\n  TextField,\r\n  Autocomplete,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { Formik } from \"formik\";\r\nimport ListAltIcon from \"@mui/icons-material/ListAlt\";\r\nimport { useMutation, useQueryClient } from \"react-query\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport { addCourse } from \"../api/courseApi\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { CustomContext } from \"../context/provider/CustomProvider\";\r\nfunction AddCourse({ open, setOpen }) {\r\n  const { customState } = useContext(CustomContext);\r\n  const { palette } = useTheme();\r\n  const queryClient = useQueryClient();\r\n\r\n  const [prog, setProg] = useState([]);\r\n  const [programme, setProgramme] = useState(null);\r\n  const [code, setCode] = useState(\"\");\r\n  const [course, setCourse] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let progOptions = [];\r\n\r\n    customState.programmeOptions.forEach((data, index) => {\r\n      progOptions.push(data.programme);\r\n    });\r\n\r\n    setProg(progOptions);\r\n  }, [customState.programmeOptions]);\r\n\r\n  const initialValues = {\r\n    id: \"\",\r\n    programme,\r\n    code,\r\n    course,\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    programme: Yup.string().trim().required().nullable(true),\r\n    code: Yup.string().trim().required(),\r\n    course: Yup.string().trim().required(),\r\n  });\r\n\r\n  const courseMutate = useMutation(addCourse);\r\n\r\n  const onSubmit = (values, options) => {\r\n    options.setSubmitting(true);\r\n\r\n    courseMutate.mutateAsync(values, {\r\n      onSettled: () => {\r\n        queryClient.invalidateQueries([\"course\"]);\r\n        options.setSubmitting(false);\r\n      },\r\n      onSuccess: (data) => {\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          iconColor: palette.primary.main,\r\n          title: \"Success\",\r\n          text: \"New Course addeed!!!\",\r\n          confirmButtonColor: palette.primary.main,\r\n        });\r\n      },\r\n      onError: (error) => {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          iconColor: palette.primary.main,\r\n          title: \"Error\",\r\n          text: \"Error saving course information.Please try again\",\r\n          confirmButtonColor: palette.primary.main,\r\n        });\r\n      },\r\n    \r\n    });\r\n  };\r\n\r\n  return (\r\n    <Dialog fullWidth maxWidth=\"xs\" open={open} onClose={() => setOpen(false)}>\r\n      <DialogTitle title=\"Add New Course\">\r\n        <ListAltIcon />\r\n        Add New Course\r\n      </DialogTitle>\r\n\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n        enableReinitialize={true}\r\n      >\r\n        {({\r\n          isSubmitting,\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleSubmit,\r\n          handleBlur,\r\n        }) => (\r\n          <>\r\n            <DialogContent>\r\n              <Stack paddingTop={2} rowGap={2}>\r\n                <Autocomplete\r\n                  id=\"programme\"\r\n                  disablePortal\r\n                  size=\"small\"\r\n                  options={prog}\r\n                  value={programme}\r\n                  onChange={(e, value) => setProgramme(value)}\r\n                  renderInput={(props) => (\r\n                    <TextField\r\n                      variant=\"filled\"\r\n                      label=\"Select Programme\"\r\n                      size=\"small\"\r\n                      placeholder=\"Select Programme\"\r\n                      fullWidth\r\n                      {...props}\r\n                      error={Boolean(touched.programme && errors.programme)}\r\n                      helperText={errors.programme}\r\n                    />\r\n                  )}\r\n                />\r\n\r\n                <TextField\r\n                  variant=\"filled\"\r\n                  label=\"Course Code\"\r\n                  id=\"code\"\r\n                  size=\"small\"\r\n                  placeholder=\"Enter Course Code here\"\r\n                  fullWidth\r\n                  value={values.code}\r\n                  onChange={(e, value) => setCode(e.currentTarget.value)}\r\n                  error={Boolean(touched.code && errors.code)}\r\n                  helperText={errors.code}\r\n                />\r\n\r\n                <TextField\r\n                  variant=\"filled\"\r\n                  label=\"Course\"\r\n                  id=\"course\"\r\n                  size=\"small\"\r\n                  placeholder=\"Enter Course here\"\r\n                  fullWidth\r\n                  value={values.course}\r\n                  onChange={(e, value) => setCourse(e.currentTarget.value)}\r\n                  error={Boolean(touched.course && errors.course)}\r\n                  helperText={errors.course}\r\n                />\r\n              </Stack>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <LoadingButton\r\n                variant=\"contained\"\r\n                loading={isSubmitting}\r\n                onClick={handleSubmit}\r\n              >\r\n                Save\r\n              </LoadingButton>\r\n              <Button color=\"secondary\" onClick={() => setOpen(false)}>\r\n                Cancel\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default AddCourse;\r\n","import React, { useState } from \"react\";\r\nimport { Add } from \"@mui/icons-material\";\r\nimport { Box, Button } from \"@mui/material\";\r\nimport CustomTable from \"../tables/CustomTable\";\r\nimport AddCourse from \"../modals/AddCourse\";\r\nimport { courseColumns } from \"../data/columns\";\r\nimport { useQuery } from \"react-query\";\r\nimport { getAllCourses } from \"../api/courseApi\";\r\n\r\nfunction CourseTab() {\r\n  const courseData = useQuery([\"course\"], getAllCourses, {\r\n    refetchOnWindowFocus: true,\r\n    onSuccess: (data) => {\r\n      // //data);\r\n    },\r\n  });\r\n\r\n  const [openAddCourse, setOpenAddCourse] = useState(false);\r\n  return (\r\n    <section>\r\n      <Box>\r\n        <Box display=\"flex\" justifyContent=\"flex-end\">\r\n          <Button\r\n            color=\"secondary\"\r\n            variant=\"contained\"\r\n            sx={{ color: \"#fff\" }}\r\n            onClick={() => setOpenAddCourse(true)}\r\n            startIcon={<Add />}\r\n          >\r\n            Add New Course\r\n          </Button>\r\n        </Box>\r\n        <CustomTable\r\n          isLoading={courseData.isLoading}\r\n          heading=\"Course\"\r\n          columns={courseColumns}\r\n          data={courseData.data}\r\n          refresh={courseData.refetch}\r\n        />\r\n      </Box>\r\n      <AddCourse open={openAddCourse} setOpen={setOpenAddCourse} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default CourseTab;\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 9.3V4h-3v2.6L12 3 2 12h3v8h5v-6h4v6h5v-8h3l-3-2.7zm-9 .7c0-1.1.9-2 2-2s2 .9 2 2h-4z\"\n}), 'House');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9.4 16.6 4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0 4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"\n}), 'CodeSharp');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M22 3h-3V1h-2v2H7V1H5v2H2v20h20V3zm-2 18H4V8h16v13z\"\n}), 'CalendarTodaySharp');","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport {\r\n  Box,\r\n  Breadcrumbs,\r\n  Divider,\r\n  Typography,\r\n  Tab,\r\n  Link,\r\n} from \"@mui/material\";\r\nimport { useQuery } from \"react-query\";\r\nimport Content from \"../components/Content\";\r\nimport { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\nimport DepartmentTab from \"../components/tabs/DepartmentTab\";\r\nimport ProgrammeTab from \"../components/tabs/ProgrammeTab\";\r\nimport CourseTab from \"../components/tabs/CourseTab\";\r\nimport { CalendarTodaySharp, CodeSharp, House } from \"@mui/icons-material\";\r\nimport { getAllCourses } from \"../components/api/courseApi\";\r\n\r\nfunction Department() {\r\n  const [tab, setTab] = React.useState(\"1\");\r\n\r\n  const courseData = useQuery([\"course\"], getAllCourses, {\r\n    refetchOnWindowFocus: true,\r\n  });\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>AAMUSTED Results System | Department</title>\r\n      </Helmet>\r\n\r\n      <section className=\"department-container\">\r\n        <Content>\r\n          <section>\r\n            <Typography variant=\"h4\">Department</Typography>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"flex-end\",\r\n              }}\r\n            >\r\n              <Breadcrumbs>\r\n                <Link>Home</Link>\r\n                <Typography>Department</Typography>\r\n              </Breadcrumbs>\r\n            </Box>\r\n            <Divider />\r\n\r\n            <TabContext value={tab}>\r\n              <TabList\r\n                onChange={(e, newtab) => setTab(newtab)}\r\n                aria-label=\"department tabs\"\r\n                centered\r\n              >\r\n                <Tab\r\n                  label=\"Department\"\r\n                  value=\"1\"\r\n                  icon={<House />}\r\n                  iconPosition=\"start\"\r\n                />\r\n                <Tab\r\n                  label=\"Programme\"\r\n                  value=\"2\"\r\n                  icon={<CodeSharp />}\r\n                  iconPosition=\"start\"\r\n                />\r\n                <Tab\r\n                  label=\"Course\"\r\n                  value=\"3\"\r\n                  icon={<CalendarTodaySharp />}\r\n                  iconPosition=\"start\"\r\n                />\r\n              </TabList>\r\n\r\n              <TabPanel value=\"1\">\r\n                <DepartmentTab />\r\n              </TabPanel>\r\n              <TabPanel value=\"2\">\r\n                <ProgrammeTab />\r\n              </TabPanel>\r\n              <TabPanel value=\"3\">\r\n                <CourseTab data={courseData} />\r\n              </TabPanel>\r\n            </TabContext>\r\n          </section>\r\n        </Content>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Department;\r\n"],"names":["open","setOpen","palette","useTheme","queryClient","useQueryClient","validationSchema","Yup","shape","department","trim","required","departmentMutate","useMutation","addDepartment","Dialog","fullWidth","maxWidth","onClose","tabIndex","DialogTitle","title","HouseSiding","initialValues","id","onSubmit","values","options","setSubmitting","mutateAsync","onSettled","invalidateQueries","onSuccess","data","Swal","icon","iconColor","primary","main","text","confirmButtonColor","onError","error","formik","DialogContent","Stack","paddingTop","TextField","variant","label","size","value","onChange","handleChange","onBlur","handleBlur","touched","errors","helperText","DialogActions","LoadingButton","loading","isSubmitting","onClick","handleSubmit","sx","minWidth","Button","color","customDispatch","useContext","CustomContext","departmentData","useQuery","getAllDepartments","type","payload","useState","openAddDepartment","setOpenAddDepartment","Box","display","justifyContent","startIcon","Add","CustomTable","isLoading","heading","columns","departmentColumns","showResultsButton","refresh","refetch","customState","depart","setDepart","setDepartment","programme","setProgramme","useEffect","departOptions","departmentOptions","forEach","index","push","nullable","programmeMutate","addProgramme","enableReinitialize","rowGap","Autocomplete","disablePortal","e","renderInput","props","placeholder","Boolean","autoFocus","currentTarget","openAddProgramme","setOpenAddProgramme","programmeData","getAllProgrammes","programmeColumns","prog","setProg","code","setCode","course","setCourse","progOptions","programmeOptions","courseMutate","addCourse","ListAlt","courseData","getAllCourses","refetchOnWindowFocus","openAddCourse","setOpenAddCourse","courseColumns","createSvgIcon","_jsx","d","React","tab","setTab","Helmet","className","Content","Typography","Breadcrumbs","Link","Divider","TabContext","TabList","newtab","centered","Tab","House","iconPosition","CodeSharp","CalendarTodaySharp","TabPanel"],"sourceRoot":""}