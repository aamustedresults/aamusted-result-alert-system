{"version":3,"file":"static/js/756.55181516.chunk.js","mappings":"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","sources":["pages/Register.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { Helmet } from \"react-helmet\";\r\nimport {\r\n  Breadcrumbs,\r\n  Box,\r\n  Divider,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  MenuItem,\r\n  Alert,\r\n} from \"@mui/material\";\r\nimport { useMutation, useQuery } from \"react-query\";\r\nimport { Formik } from \"formik\";\r\nimport { string, object, ref } from \"yup\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { addUser, getUsers } from \"../components/api/userApi\";\r\n\r\nimport Content from \"../components/Content\";\r\nimport CustomTable from \"../components/tables/CustomTable\";\r\nimport { userColumns } from \"../components/data/columns\";\r\n// import Swal from \"sweetalert2\";\r\n\r\nfunction Register() {\r\n  const [registerMessage, setRegisterMessage] = useState({\r\n    severity: \"\",\r\n    msg: \"\",\r\n  });\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n  //Get all users\r\n  const users = useQuery([\"users\"], getUsers, {\r\n    suspense: () => {\r\n      return <div>loading</div>;\r\n    },\r\n    select: (data) => {\r\n      return data.map((user) => {\r\n        return {\r\n          _id: user._id,\r\n          username: user.username,\r\n          role: user.role,\r\n          active: user.active,\r\n          createdAt: user.createdAt,\r\n        };\r\n      });\r\n    },\r\n  });\r\n\r\n  const initialValues = {\r\n    username,\r\n    email,\r\n    role,\r\n    password,\r\n    confirmPassword,\r\n  };\r\n  const validationSchema = object().shape({\r\n    username: string().trim().required(),\r\n    email: string().trim().required().email(),\r\n    password: string()\r\n      .trim()\r\n      .required()\r\n      .min(8, \"Password Should be at least 8 characters long\"),\r\n    confirmPassword: string()\r\n      .trim()\r\n      .required()\r\n      .oneOf([ref(\"password\"), null], \"Passwords do not match\"),\r\n  });\r\n\r\n  const userMutate = useMutation(addUser);\r\n  const onSubmit = (values, options) => {\r\n    delete values.confirmPassword;\r\n    userMutate.mutateAsync(values, {\r\n      onSettled: () => {\r\n        options.setSubmitting(false);\r\n      },\r\n      onSuccess: async (data) => {\r\n        if (data) {\r\n          // Swal.fire({\r\n          //   icon: \"success\",\r\n          //   title: \"Success\",\r\n          //   text: \"User added\",\r\n          // });\r\n\r\n          setRegisterMessage({\r\n            severity: \"success\",\r\n            msg: \"New User Added!!!\",\r\n          });\r\n          options.resetForm();\r\n        }\r\n      },\r\n      onError: (error) => {\r\n        setRegisterMessage({\r\n          severity: \"error\",\r\n          msg: error,\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleCloseAlertMessage = () => {\r\n    setRegisterMessage({\r\n      severity: \"\",\r\n      msg: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>AAMUSTED Results System | Register</title>\r\n      </Helmet>\r\n\r\n      <section className=\"register-user-container\">\r\n        <Content>\r\n          <Typography variant=\"h5\">Register New User</Typography>\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              justifyContent: \"flex-end\",\r\n            }}\r\n          >\r\n            <Breadcrumbs>\r\n              <Link to=\"register\">Home</Link>\r\n              <Typography>Register</Typography>\r\n            </Breadcrumbs>\r\n          </Box>\r\n          <Divider sx={{ marginBottom: 2 }} />\r\n          {registerMessage.msg && (\r\n            <Alert\r\n              severity={registerMessage.severity}\r\n              onClose={handleCloseAlertMessage}\r\n            >\r\n              {registerMessage.msg}\r\n            </Alert>\r\n          )}\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              flexDirection: { xs: \"column\", md: \"row\" },\r\n              justifyContent: { xs: \"center\", md: \"space-between\" },\r\n              alignItems: { xs: \"center\", md: \"stretch\" },\r\n              gap: { xs: 2, md: 6 },\r\n            }}\r\n          >\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={validationSchema}\r\n              onSubmit={onSubmit}\r\n              enableReinitialize={true}\r\n            >\r\n              {({ errors, touched, handleSubmit, isSubmitting }) => (\r\n                <Box\r\n                  sx={{\r\n                    paddingY: 2,\r\n                  }}\r\n                >\r\n                  <Paper\r\n                    sx={{\r\n                      width: 350,\r\n                      borderTop: `solid 2px #5aa7a7`,\r\n                      paddingX: 2,\r\n                      paddingY: 4,\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                      gap: 3,\r\n                      boxShadow: `0px 0px 13px 0px rgb(82 63 105 / 10%)`,\r\n                      borderRadius: \"10px\",\r\n                    }}\r\n                  >\r\n                    <TextField\r\n                      variant=\"filled\"\r\n                      label=\"Username\"\r\n                      placeholder=\"Enter Username here\"\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      value={username}\r\n                      onChange={(e) => setUsername(e.target.value)}\r\n                      error={Boolean(touched.username && errors.username)}\r\n                      helperText={errors.username && errors.username}\r\n                    />\r\n                    <TextField\r\n                      type=\"email\"\r\n                      variant=\"filled\"\r\n                      label=\"Email Address\"\r\n                      placeholder=\"Enter email address here\"\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}\r\n                      error={Boolean(touched.email && errors.email)}\r\n                      helperText={errors.email && errors.email}\r\n                    />\r\n\r\n                    <TextField\r\n                      select\r\n                      variant=\"filled\"\r\n                      label=\"Select Role\"\r\n                      placeholder=\"Role\"\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      value={role}\r\n                      onChange={(e) => setRole(e.target.value)}\r\n                      error={Boolean(touched.role && errors.role)}\r\n                      helperText={errors.role && errors.role}\r\n                    >\r\n                      <MenuItem value=\"administrator\">Administrator</MenuItem>\r\n                      {/* <MenuItem value=\"tutor\">Tutor</MenuItem>\r\n                      <MenuItem value=\"student\">Student</MenuItem> */}\r\n                    </TextField>\r\n\r\n                    <TextField\r\n                      variant=\"filled\"\r\n                      type=\"password\"\r\n                      label=\"Password\"\r\n                      placeholder=\"Enter Password here\"\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      value={password}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      error={Boolean(touched.password && errors.password)}\r\n                      helperText={errors.password && errors.password}\r\n                    />\r\n\r\n                    <TextField\r\n                      variant=\"filled\"\r\n                      type=\"password\"\r\n                      label=\"Confirm Password\"\r\n                      placeholder=\"Enter Password here\"\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      value={confirmPassword}\r\n                      onChange={(e) => setConfirmPassword(e.target.value)}\r\n                      error={Boolean(\r\n                        touched.confirmPassword && errors.confirmPassword\r\n                      )}\r\n                      helperText={\r\n                        errors.confirmPassword && errors.confirmPassword\r\n                      }\r\n                    />\r\n\r\n                    <LoadingButton\r\n                      loading={isSubmitting}\r\n                      variant=\"contained\"\r\n                      fullWidth\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      Register\r\n                    </LoadingButton>\r\n                  </Paper>\r\n                </Box>\r\n              )}\r\n            </Formik>\r\n            <Box sx={{ flexGrow: 1 }}>\r\n              <CustomTable\r\n                heading=\"Users\"\r\n                data={users.data ? users.data : []}\r\n                columns={userColumns}\r\n                refresh={users.refetch}\r\n                showDisableButton={true}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Content>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n"],"names":["useState","severity","msg","registerMessage","setRegisterMessage","username","setUsername","role","setRole","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","users","useQuery","getUsers","suspense","select","data","map","user","_id","active","createdAt","initialValues","validationSchema","object","shape","string","trim","required","min","oneOf","ref","userMutate","useMutation","addUser","className","variant","sx","display","justifyContent","to","marginBottom","onClose","flexDirection","xs","md","alignItems","gap","onSubmit","values","options","mutateAsync","onSettled","setSubmitting","onSuccess","resetForm","onError","error","enableReinitialize","errors","touched","handleSubmit","isSubmitting","paddingY","width","borderTop","paddingX","boxShadow","borderRadius","label","placeholder","fullWidth","size","value","onChange","e","target","Boolean","helperText","type","loading","onClick","flexGrow","heading","columns","userColumns","refresh","refetch","showDisableButton"],"sourceRoot":""}