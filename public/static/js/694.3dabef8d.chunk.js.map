{"version":3,"file":"static/js/694.3dabef8d.chunk.js","mappings":"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","sources":["components/modals/AddLecturer.js","pages/Lecturer.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Autocomplete,\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Divider,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Formik } from \"formik\";\r\nimport { object, string, date, number } from \"yup\";\r\nimport { useMutation, useQueryClient, useQuery } from \"react-query\";\r\nimport { PersonAdd } from \"@mui/icons-material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { addLecturer } from \"../api/lecturerApi\";\r\nimport Edit from \"@mui/icons-material/Edit\";\r\nimport { getAllDepartments } from \"../api/departmentApi\";\r\n\r\nfunction AddLecturer({ open, setOpen }) {\r\n  const { palette } = useTheme();\r\n  const queryClient = useQueryClient();\r\n\r\n  const [depart, setDepart] = useState([]);\r\n\r\n  useQuery([\"department\"], getAllDepartments, {\r\n    onSuccess: (departments) => {\r\n      const deparmentList = departments.map(({ department }) => department);\r\n      setDepart(deparmentList);\r\n    },\r\n  });\r\n\r\n  const [profileImg, setProfileImg] = useState(null);\r\n  const [fullname, setFullname] = useState(\"\");\r\n  const [gender, setGender] = useState(\"Male\");\r\n  const [dob, setDob] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [telephoneNo, setTelephoneNo] = useState(\"\");\r\n  const [department, setDepartment] = useState(null);\r\n\r\n  const initialValues = {\r\n    profile: profileImg,\r\n    fullname,\r\n    gender,\r\n    dob,\r\n    email,\r\n    address,\r\n    telephoneNo,\r\n    department,\r\n  };\r\n\r\n  const validationSchema = object().shape({\r\n    fullname: string().trim().required(\"required*\"),\r\n    gender: string().trim().required(\"required*\"),\r\n    dob: date().required(\"required*\"),\r\n    email: string().trim().required(\"required\").email(\"Invalid email address\"),\r\n    address: string().trim().required(\"required\"),\r\n    telephoneNo: string()\r\n      .trim()\r\n      .required(\"Required*\")\r\n      .matches(/^(\\+\\d{1,3})?\\(?\\d{3}\\)?\\d{3}\\d{4}$/, \"Invalid Phone number\"),\r\n    department: string().trim().required(\"required*\").nullable(true),\r\n  });\r\n\r\n  const postStudent = useMutation(addLecturer);\r\n\r\n  const onSubmit = (values, options) => {\r\n    options.setSubmitting(true);\r\n    values.professionalID = `LEC${uuid().split(\"-\")[0]}`;\r\n    postStudent.mutateAsync(values, {\r\n      onSettled: () => {\r\n        options.setSubmitting(false);\r\n        queryClient.invalidateQueries(\"lecturer\");\r\n      },\r\n      onSuccess: (data) => {\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          iconColor: palette.primary.main,\r\n          title: \"Success\",\r\n          text: \"New Lecturer added!!!\",\r\n          confirmButtonColor: \"#8C1438\",\r\n        });\r\n        options.resetForm();\r\n      },\r\n      onError: (error) => {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          iconColor: palette.primary.main,\r\n          title: \"Error\",\r\n          text: \"Error saving lecturer information.Please try again\",\r\n          confirmButtonColor: palette.primary.main,\r\n        });\r\n      },\r\n    });\r\n  };\r\n  return (\r\n    <Dialog maxWidth=\"sm\" fullWidth open={open} onClose={() => setOpen(false)}>\r\n      <DialogTitle title=\"Add Lecturer\" borderBottom=\"1px solid #8C1438\">\r\n        <PersonAdd /> Add Lecturer\r\n      </DialogTitle>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n        enableReinitialize={true}\r\n      >\r\n        {({\r\n          isSubmitting,\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleSubmit,\r\n        }) => (\r\n          <>\r\n            <DialogContent>\r\n              <Box\r\n                sx={{\r\n                  width: 120,\r\n                  height: 120,\r\n                  backgroundColor: \"#fff\",\r\n                  position: \"relative\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                  margin: \"auto\",\r\n                  marginTop: 2,\r\n                }}\r\n              >\r\n                <Avatar\r\n                  src={\r\n                    profileImg === null ? null : URL.createObjectURL(profileImg)\r\n                  }\r\n                  sx={{ width: 100, height: 100, position: \"relative\" }}\r\n                />\r\n                <FormLabel\r\n                  htmlFor=\"profile\"\r\n                  title=\"Attach Your Photo\"\r\n                  sx={{\r\n                    width: \"30px\",\r\n                    height: \"30px\",\r\n                    borderRadius: \"50%\",\r\n                    padding: \"5px\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    position: \"absolute\",\r\n                    top: 0,\r\n                    right: 0,\r\n                    backgroundColor: \"#8C1438\",\r\n                  }}\r\n                >\r\n                  <Edit sx={{ width: 16, color: \"#fff\" }} />\r\n                </FormLabel>\r\n                <input\r\n                  type=\"file\"\r\n                  hidden\r\n                  id=\"profile\"\r\n                  onChange={(e) => setProfileImg(e.target.files[0])}\r\n                />\r\n              </Box>\r\n              <Typography>1.Personal Information</Typography>\r\n              <Divider />\r\n\r\n              <Grid container spacing={3} paddingY={2}>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    label=\"FullName\"\r\n                    placeholder=\"FullName here\"\r\n                    id=\"fullname\"\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    value={fullname}\r\n                    error={Boolean(touched.fullname && errors.fullname)}\r\n                    helperText={errors.fullname}\r\n                    onChange={(e) => setFullname(e.currentTarget.value)}\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    label=\"Date of birth\"\r\n                    placeholder=\"\"\r\n                    type=\"date\"\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    value={values.dob}\r\n                    error={Boolean(touched.dob && errors.dob)}\r\n                    helperText={errors.dob}\r\n                    // onChange={(e, value) => setDob(e.currentTarget.value)}\r\n                    onChange={handleChange(\"dob\")}\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <FormControl>\r\n                    <FormLabel id=\"gender-group\">Gender</FormLabel>\r\n                    <RadioGroup\r\n                      aria-labelledby=\"gender-group\"\r\n                      name=\"gender-group\"\r\n                      row\r\n                      value={gender}\r\n                      onChange={(e, value) => setGender(value)}\r\n                    >\r\n                      <FormControlLabel\r\n                        value=\"Male\"\r\n                        control={<Radio />}\r\n                        label=\"Male\"\r\n                      />\r\n                      <FormControlLabel\r\n                        value=\"Female\"\r\n                        control={<Radio />}\r\n                        label=\"Female\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n                {/* <Grid item></Grid> */}\r\n              </Grid>\r\n\r\n              <Typography>2.Contact Information</Typography>\r\n              <Divider />\r\n              <Grid container spacing={3} paddingY={2}>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    label=\"Email Address\"\r\n                    placeholder=\"Email Address here\"\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    value={email}\r\n                    error={Boolean(touched.email && errors.email)}\r\n                    helperText={errors.email}\r\n                    onChange={(e) => setEmail(e.currentTarget.value)}\r\n                    required\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    label=\"Telephone\"\r\n                    placeholder=\"Telephone here\"\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    value={telephoneNo}\r\n                    error={Boolean(touched.telephoneNo && errors.telephoneNo)}\r\n                    helperText={errors.telephoneNo}\r\n                    onChange={(e, value) =>\r\n                      setTelephoneNo(e.currentTarget.value)\r\n                    }\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <TextField\r\n                    label=\"Address\"\r\n                    placeholder=\"Address here\"\r\n                    multiline\r\n                    maxRows={4}\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    value={address}\r\n                    error={Boolean(touched.address && errors.address)}\r\n                    helperText={errors.address}\r\n                    onChange={(e) => setAddress(e.currentTarget.value)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Typography>3.Department Information</Typography>\r\n              <Divider />\r\n              <Grid container spacing={3} paddingY={2}>\r\n                <Grid item xs={12} md={6}>\r\n                  <Autocomplete\r\n                    options={depart}\r\n                    value={department}\r\n                    onChange={(e, value) => setDepartment(value)}\r\n                    renderInput={(props) => (\r\n                      <TextField\r\n                        {...props}\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        error={Boolean(touched.department && errors.department)}\r\n                        helperText={errors.department}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <LoadingButton\r\n                disabled={isSubmitting}\r\n                sx={{ minWidth: 100 }}\r\n                variant=\"contained\"\r\n                onClick={handleSubmit}\r\n                loading={isSubmitting}\r\n              >\r\n                Save\r\n              </LoadingButton>\r\n              <Button color=\"secondary\" onClick={() => setOpen(false)}>\r\n                Close\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default AddLecturer;\r\n","import React, { useState } from \"react\";\r\nimport { Add } from \"@mui/icons-material\";\r\nimport { Typography, Box, Divider, Button } from \"@mui/material\";\r\n\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useQuery } from \"react-query\";\r\nimport Content from \"../components/Content\";\r\nimport AddLecturer from \"../components/modals/AddLecturer\";\r\nimport CustomTable from \"../components/tables/CustomTable\";\r\nimport { lecturerColumns } from \"../components/data/columns\";\r\n\r\nimport { getAllLecturers } from \"../components/api/lecturerApi\";\r\nfunction Lecturer() {\r\n  const [openAddLecturer, setOpenAddLecturer] = useState(false);\r\n  const [lecturerErr, setLecturerErr] = useState(false);\r\n\r\n  const lecturers = useQuery([\"lecturer\"], getAllLecturers, {\r\n    retry: 3,\r\n    onSuccess: (data) => {},\r\n    onError: (error) => {\r\n      // alert(\"Error occured while fetching data\");\r\n      if (error === undefined) {\r\n        setLecturerErr(\r\n          `Connection failed.We can’t connect to the server.Try again later`\r\n        );\r\n        return;\r\n      }\r\n      // //error);\r\n      setLecturerErr(error);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <section>\r\n      <Helmet>\r\n        <title>AAMUSTED Results System | Lecturer</title>\r\n      </Helmet>\r\n      <Content>\r\n        <section>\r\n          <Typography variant=\"h4\">Lecturers</Typography>\r\n          <Typography variant=\"body2\">\r\n            View and manage lecturers information\r\n          </Typography>\r\n          <Divider />\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              justifyContent: \"flex-end\",\r\n            }}\r\n          ></Box>\r\n        </section>\r\n        <Box display=\"flex\" justifyContent=\"flex-end\" paddingY={4}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            startIcon={<Add />}\r\n            onClick={() => setOpenAddLecturer(true)}\r\n          >\r\n             New Lecturer\r\n          </Button>\r\n        </Box>\r\n        <CustomTable\r\n          heading=\"Lecturers\"\r\n          columns={lecturerColumns}\r\n          data={lecturers.data ? lecturers.data : []}\r\n          refresh={lecturers.refetch}\r\n        />\r\n      </Content>\r\n      <AddLecturer open={openAddLecturer} setOpen={setOpenAddLecturer} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Lecturer;\r\n"],"names":["open","setOpen","palette","useTheme","queryClient","useQueryClient","useState","depart","setDepart","useQuery","getAllDepartments","onSuccess","departments","deparmentList","map","department","profileImg","setProfileImg","fullname","setFullname","gender","setGender","dob","email","setEmail","address","setAddress","telephoneNo","setTelephoneNo","setDepartment","initialValues","profile","validationSchema","object","shape","string","trim","required","date","matches","nullable","postStudent","useMutation","addLecturer","Dialog","maxWidth","fullWidth","onClose","DialogTitle","title","borderBottom","PersonAdd","onSubmit","values","options","setSubmitting","professionalID","uuid","split","mutateAsync","onSettled","invalidateQueries","data","Swal","icon","iconColor","primary","main","text","confirmButtonColor","resetForm","onError","error","enableReinitialize","isSubmitting","errors","touched","handleChange","handleSubmit","DialogContent","Box","sx","width","height","backgroundColor","position","display","alignItems","justifyContent","margin","marginTop","Avatar","src","URL","createObjectURL","FormLabel","htmlFor","borderRadius","padding","top","right","Edit","color","type","hidden","id","onChange","e","target","files","Typography","Divider","Grid","container","spacing","paddingY","item","xs","md","TextField","label","placeholder","size","value","Boolean","helperText","currentTarget","FormControl","RadioGroup","name","row","FormControlLabel","control","Radio","multiline","maxRows","Autocomplete","renderInput","props","DialogActions","LoadingButton","disabled","minWidth","variant","onClick","loading","Button","openAddLecturer","setOpenAddLecturer","setLecturerErr","lecturers","getAllLecturers","retry","undefined","Content","startIcon","Add","CustomTable","heading","columns","lecturerColumns","refresh","refetch"],"sourceRoot":""}